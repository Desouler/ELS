services:
  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file. It also creates the
  # roles required by some of these users.
  #
  # This task only needs to be performed once, during the *initial* startup of
  # the stack. Any subsequent run will reset the passwords of existing users to
  # the values defined inside the '.env' file, and the built-in roles to their
  # default permissions.
  #
  # By default, it is excluded from the services started by 'docker compose up'
  # due to the non-default profile it belongs to. To run it, either provide the
  # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
  # such as 'docker compose up setup'.
  setup:
    profiles:
      - setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/lib.sh:/lib.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
      - ./certs/ca.crt:/ca.crt:ro,z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  tls:
    profiles:
      - setup
    build:
      context: tls/
    container_name: tls
    user: 1000:1000
    init: true
    volumes:
      - ./certs:/certs

  elasticsearch:
    container_name: elastic
    user: 1000:1000
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
      - ./certs/elastic/ca.crt:/usr/share/elasticsearch/config/ca.crt:ro,z
      - ./certs/elastic/elastic.crt:/usr/share/elasticsearch/config/elasticsearch.crt:ro,z
      - ./certs/elastic/elastic.key:/usr/share/elasticsearch/config/elasticsearch.key:ro,z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk
    restart: unless-stopped

  logstash:
    container_name: logstash
    user: 1000:1000
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
      - ./certs/logstash/ca.crt:/usr/share/logstash/config/ca.crt:ro,z
      - ./certs/logstash/logstash.crt:/usr/share/logstash/config/logstash.crt:ro,z
      - ./certs/logstash/logstash.key:/usr/share/logstash/config/logstash.key:ro,z
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    container_name: kibana
    user: 1000:1000
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
      - ./certs/kibana/ca.crt:/usr/share/kibana/config/ca.crt:ro,z
      - ./certs/kibana/kibana.crt:/usr/share/kibana/config/kibana.crt:ro,z
      - ./certs/kibana/kibana.key:/usr/share/kibana/config/kibana.key:ro,z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: unless-stopped

  filebeat:
    container_name: filebeat
    user: root
    build:
      context: extensions/filebeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # Run as 'root' instead of 'filebeat' (uid 1000) to allow reading
    # 'docker.sock' and the host's filesystem.
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    volumes:
      - ./extensions/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      # (!) CA certificate. Generate using the 'tls' service.
      - ./certs/ca.crt:/usr/share/filebeat/ca.crt:ro,z
      - ./certs/filebeat/filebeat.crt:/usr/share/filebeat/filebeat.crt:ro,z
      - ./certs/filebeat/filebeat.key:/usr/share/filebeat/filebeat.key:ro,z
      # This is needed for filebeat to load logs for system and auth modules
      - /var/log/:/var/log/:ro
      # This is needed for filebeat to load logs for auditd module. you might have to install audit system
      # on ubuntu first (sudo apt-get install -y auditd audispd-plugins)
      - /var/log/audit/:/var/log/audit/:ro
    environment:
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST:-node1}
      KIBANA_HOST: ${KIBANA_HOST:-node1}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME:-elastic}
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD:-changeme}
    networks:
      - elk
    depends_on:
      - elasticsearch
      - kibana

  myapp:
    container_name: myapp
    build:
      context: ./app
    ports:
      - 33333:80
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - SERVER_PORT=29688
      - WSPORT=29688
    volumes:
      - ./certs/my_app/ca.crt:/usr/share/my_app/ca.crt:ro,z
      - ./certs/my_app/my_app.crt:/usr/share/my_app/my_app.crt:ro,z
      - ./certs/my_app/my_app.key:/usr/share/my_app/my_app.key:ro,z
    networks:
      - elk

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
